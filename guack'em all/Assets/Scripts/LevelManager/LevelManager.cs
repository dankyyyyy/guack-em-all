using UnityEngine;
using UnityEngine.SceneManagement;

public class LevelManager : MonoBehaviour
{
    public int currentLevelIndex; // The index of the current level in the build settings
    public SavegameManager saveGameManager; // Reference to the SavegameManager

    [System.Obsolete]
    void Start()
    {
        // Find the SavegameManager if it hasn't been assigned in the Inspector
        if (saveGameManager == null)
        {
            saveGameManager = FindObjectOfType<SavegameManager>();
        }

        // TODO Implement function to update the level selection UI based on the amount of levels unlocked
        // Possibly move the method to a dedicated UI Handler
        UpdateLevelAvailability();
    }

    public void LoadLevel(int levelIndex)
    {
        if (saveGameManager != null && levelIndex <= saveGameManager.playerData.HighestUnlockedLevel)
        {
            SceneManager.LoadScene(levelIndex);
        }
        else
        {
            Debug.Log("Level " + levelIndex + " is locked!");
            // TODO Implement UI pop-up saying the level is locked
        }
    }

    public void MarkLevelAsCompleted(int completedLevelIndex)
    {
        if (saveGameManager != null && completedLevelIndex == saveGameManager.playerData.HighestUnlockedLevel)
        {
            saveGameManager.playerData.HighestUnlockedLevel++;
            saveGameManager.SaveGame(); // Immediately save the updated unlocked level
            UpdateLevelAvailability(); // Update the UI
        }
        else if (saveGameManager != null && completedLevelIndex > saveGameManager.playerData.HighestUnlockedLevel)
        {
            Debug.LogWarning("Trying to mark a level as completed that is beyond the current unlocked level. This might indicate an issue.");
        }
    }

    // This is an example function to update the UI of level buttons - generated by Gemini || verify code functionality before pushing uncommented.
    public void UpdateLevelAvailability()
    {
        // Find all your level buttons or UI elements
        // Example: Button[] levelButtons = FindObjectsOfType<Button>();
        // foreach (Button button in levelButtons)
        // {
        //     int levelIndex = GetLevelIndexFromButton(button); // You'll need to implement this
        //     if (levelIndex <= saveGameManager.playerData.HighestUnlockedLevel)
        //     {
        //         // Make the button interactable
        //         button.interactable = true;
        //     }
        //     else
        //     {
        //         // Disable the button or indicate it's locked
        //         button.interactable = false;
        //     }
        // }
    }

    // Example function to get the level index associated with a button (you'll need to adapt this) - generated by Gemini || verify code functionality before pushing uncommented.
    private int GetLevelIndexFromButton(UnityEngine.UI.Button button)
    {
        // You might store the level index in the button's name, a custom component, etc.
        // This is just a placeholder, implement it based on your UI structure.
        return int.Parse(button.name.Replace("LevelButton_", ""));
    }
}
